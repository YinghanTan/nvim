extends vimwiki

#######################################################################
#                        eric-chapdelaine Math                        #
#######################################################################

# From https://github.com/honza/vim-snippets/blob/master/UltiSnips/markdown.snippets
# https://github.com/eric-chapdelaine/dots/blob/master/.vim/UltiSnips/vimwiki.snippets

global !p

texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC', 'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES', 'AmsFS', 'AmsGS' ]] + ["VimwikiMath", "VimwikiEqIn", "textSnipTEX"]


texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

# From https://github.com/gillescastel/latex-snippets/blob/master/tex.snippets
def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False

# A overkill(dirty) table with automatic alignment feature
def create_table(snip):
	# retrieving single line from current string and treat it like tabstops count
	placeholders_string = snip.buffer[snip.line].strip()
	rows_amount = int(placeholders_string[0])
	columns_amount = int(placeholders_string[1])

	prefix_str = "from vimsnippets import display_width;"

	# erase current line
	snip.buffer[snip.line] = ""

	# create anonymous snippet with expected content and number of tabstops
	anon_snippet_title = "| "
	anon_snippet_delimiter = "|"
	for col in range(1, columns_amount+1):
		sync_rows = [x*columns_amount+col for x in range(rows_amount+1)]
		sync_str = ",".join(["t[{0}]".format(x) for x in sync_rows])
		max_width_str = "max(list(map(display_width, [" + sync_str + "])))"
		cur_width_str = "display_width(t[" + str(col) + "])"
		rv_val = "(" + max_width_str + "-" + cur_width_str + ")*' '"
		anon_snippet_title += "${" + str(col)  + ":head" + str(col)\
			+ "}`!p " + prefix_str + "snip.rv=" + rv_val + "` | "
		anon_snippet_delimiter += ":`!p " + prefix_str + "snip.rv = "\
			+ max_width_str + "*'-'" + "`-|"

	anon_snippet_title += "\n"

	anon_snippet_delimiter += "\n"
	anon_snippet_body = ""
	for row in range(1, rows_amount+1):
		body_row = "| "
		for col in range(1, columns_amount+1):
			sync_rows = [x*columns_amount+col for x in range(rows_amount+1)]
			sync_str = ",".join(["t[{0}]".format(x) for x in sync_rows])
			max_width_str = "max(list(map(display_width, [" + sync_str + "])))"
			cur_width_str = "display_width(t[" + str(row*columns_amount+col) + "])"
			rv_val = "(" + max_width_str + "-" + cur_width_str + ")*' '"
			placeholder = "R{0}C{1}".format(row, col)
			body_row += "${" + str(row*columns_amount+col)  + ":" + placeholder\
				+ "}`!p " + prefix_str + "snip.rv=" + rv_val + "` | "

		body_row += "\n"
		anon_snippet_body += body_row

	anon_snippet_table = anon_snippet_title + anon_snippet_delimiter + anon_snippet_body

	# expand anonymous snippet
	snip.expand_anon(anon_snippet_table)
endglobal

###########################
# Sections and Paragraphs #
###########################
snippet sec "Section" b
# ${1:Section Name} #
$0
endsnippet

snippet ssec "Sub Section" b
## ${1:Section Name} ##
$0
endsnippet

snippet sssec "SubSub Section" b
### ${1:Section Name} ###
$0
endsnippet

snippet par "Paragraph" b
#### ${1:Paragraph Name} ####
$0
endsnippet

snippet spar "Paragraph" b
##### ${1:Paragraph Name} #####
$0
endsnippet

###################
# Text formatting #
###################

snippet * "italics"
*${1:${VISUAL}}*$0
endsnippet

snippet ** "bold"
**${1:${VISUAL}}**$0
endsnippet

snippet *** "bold italics"
***${1:${VISUAL}}***$0
endsnippet

snippet /* "Comment"
<!-- ${1:${VISUAL}} -->$0
endsnippet

################
# Common stuff #
################
snippet link "Link to something"
[${1:${VISUAL:Text}}](${3:http://${2:www.url.com}})$0
endsnippet

snippet img "Image"
![${1:pic alt}](${2:path}${3/.+/ "/}${3:opt title}${3/.+/"/})$0
endsnippet

snippet ilc "Inline Code" i
\`$1\`$0
endsnippet

snippet cbl "Codeblock" b
\`\`\`
$1
\`\`\`
$0
endsnippet

snippet refl "Reference Link"
[${1:${VISUAL:Text}}][${2:id}]$0

[$2]:${4:http://${3:www.url.com}} "${5:$4}"
endsnippet

snippet fnt "Footnote"
[^${1:${VISUAL:Footnote}}]$0

[^$1]:${2:Text}
endsnippet

snippet detail "Disclosure"
<details${3: open=""}>
  ${1:<summary>${2}</summary>}$0
</details>
endsnippet

post_jump "create_table(snip)"
snippet "tb([1-9][1-9])" "Fancy table" br
`!p snip.rv = match.group(1)`
endsnippet

## Math Snippets

# From https://github.com/gillescastel/latex-snippets/blob/master/tex.snippets
snippet => "implies" i
\implies
endsnippet

snippet =< "implied by" i
\impliedby
endsnippet

context "math()"
snippet iff "iff" i
\iff
endsnippet

snippet mk "Math" w
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" w
\[
${1:${VISUAL}}
.\] $0
endsnippet

snippet ali "Align" b
\begin{align*}
	${1:${VISUAL}}
.\end{align*}
endsnippet


context "math()"
snippet // "Fraction" i
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

# snippet == "equals" i
# &= $1 \\\\
# endsnippet

snippet != "equals" i
\neq 
endsnippet

context "math()"
snippet ceil "ceil" i
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" i
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "pmat" i
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "bmat" i
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

snippet vmat "vmat" i
\begin{vmatrix} $1 \end{vmatrix} $0
endsnippet

context "math()"
snippet () "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" i
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet conj "conjugate" i
\overline{$1}$0
endsnippet

snippet sum "sum" w
\sum_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" i
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" i
^2
endsnippet

context "math()"
snippet cb "^3" i
^3
endsnippet

context "math()"
snippet td "to the ... power" i
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" i
^{($1)}$0
endsnippet

snippet __ "subscript" i
_{$1}$0
endsnippet

snippet ooo "\infty" i
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <= "leq" i
\le 
endsnippet

snippet >= "geq" i
\ge 
endsnippet

context "math()"
snippet EE "geq" i
\exists 
endsnippet

context "math()"
snippet AA "forall" i
\forall 
endsnippet

context "math()"
snippet xnn "xn" i
x_{n}
endsnippet

context "math()"
snippet ynn "yn" i
y_{n}
endsnippet


context "math()"
snippet xii "xi" i
x_{i}
endsnippet

context "math()"
snippet yii "yi" i
y_{i}
endsnippet

context "math()"
snippet xjj "xj" i
x_{j}
endsnippet

context "math()"
snippet yjj "yj" i
y_{j}
endsnippet

context "math()"
snippet xp1 "x" i
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" i
x_{m}
endsnippet

snippet R0+ "R0+" i
\\R_0^+
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context "math()"
snippet mcal "mathcal" i
\mathcal{$1}$0
endsnippet

snippet lll "l" i
\ell
endsnippet

context "math()"
snippet nabl "nabla" i
\nabla 
endsnippet

context "math()"
snippet xx "cross" i
\times 
endsnippet

# priority 100
# snippet ** "cdot" i
# \cdot 
# endsnippet

context "math()"
snippet norm "norm" i
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rw
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet dint "integral" w
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rw
\\`!p snip.rv = match.group(1)`
endsnippet


priority 100
context "math()"
snippet -> "to" i
\to 
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" i
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" i
\mapsto 
endsnippet

context "math()"
snippet invs "inverse" i
^{-1}
endsnippet

context "math()"
snippet compl "complement" i
^{c}
endsnippet

# context "math()"
# snippet \\\ "setminus" i
# \setminus
# endsnippet

snippet >> ">>" i
\gg
endsnippet

snippet << "<<" i
\ll
endsnippet


snippet ~~ "~" i
\sim 
endsnippet

context "math()"
snippet set "set" w
\\{$1\\} $0
endsnippet

snippet || "mid" i
 \mid 
endsnippet


context "math()"
snippet cc "subset" i
\subset 
endsnippet

snippet notin "not in " i
\not\in 
endsnippet

context "math()"
snippet inn "in " i
\in 
endsnippet

snippet NN "n" i
\N
endsnippet

snippet Nn "cap" i
\cap 
endsnippet

snippet UU "cup" i
\cup 
endsnippet

snippet uuu "bigcup" i
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

snippet nnn "bigcap" i
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet OO "emptyset" i
\O
endsnippet

snippet RR "real" i
\mathbb{R}
endsnippet

snippet QQ "Q" i
\Q
endsnippet

snippet ZZ "Z" i
\Z
endsnippet

snippet <! "normal" i
\triangleleft 
endsnippet

snippet <> "hokje" i
\diamond 
endsnippet


context "math()"
snippet '(?<!i)sts' "text subscript" ir
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" i
\text{$1}$0
endsnippet

snippet SI "SI" i
\SI{$1}{$2}
endsnippet

# Other

snippet note "Note-block"
<div class="note-block">
<strong class="note-block">${1:NOTE:}</strong>

$2
</div>
$0
endsnippet

snippet example "example"
<details>
<summary class="ui basic button">
Example
</summary>

$0
</details>
endsnippet

snippet vv "vector" i
\vec{$1}$0
endsnippet

snippet ll "lambda"
\lambda $0
endsnippet





#######################################################################
#                          Mermaid Diagrams                           #
#######################################################################

snippet md "mermaid diagram" b
\`\`\`mermaid
$1
\`\`\`
endsnippet

snippet msq1 "mermaid sequence" b
\`\`\`mermaid
sequenceDiagram
    Alice->>+John: Hello John, how are you?
    Alice->>+John: John, can you hear me?
    John-->>-Alice: Hi Alice, I can hear you!
    John-->>-Alice: I feel great!
\`\`\`
endsnippet

snippet mf3 "mermaid flowchart" b
\`\`\`mermaid
graph TD
    A[Christmas] -->|Get money| B(Go shopping)
    B --> C{Let me think}
    C -->|One| D[Laptop]
    C -->|Two| E[iPhone]
    C -->|Three| F[fa:fa-car Car]
\`\`\`
endsnippet

snippet mc1 "mermaid class" b
\`\`\`mermaid
classDiagram
    Animal <|-- Duck
    Animal <|-- Fish
    Animal <|-- Zebra
    Animal : +int age
    Animal : +String gender
    Animal: +isMammal()
    Animal: +mate()
    class Duck{
      +String beakColor
      +swim()
      +quack()
    }
    class Fish{
      -int sizeInFeet
      -canEat()
    }
    class Zebra{
      +bool is_wild
      +run()
    }
\`\`\`
endsnippet

snippet mst1 "mermaid state" b
\`\`\`mermaid
stateDiagram-v2
    [*] --> Still
    Still --> [*]
    Still --> Moving
    Moving --> Still
    Moving --> Crash
    Crash --> [*]
\`\`\`
endsnippet

snippet mer1 "mermaid erdiagram" b
\`\`\`mermaid
erDiagram
    CUSTOMER }|..|{ DELIVERY-ADDRESS : has
    CUSTOMER ||--o{ ORDER : places
    CUSTOMER ||--o{ INVOICE : "liable for"
    DELIVERY-ADDRESS ||--o{ ORDER : receives
    INVOICE ||--|{ ORDER : covers
    ORDER ||--|{ ORDER-ITEM : includes
    PRODUCT-CATEGORY ||--|{ PRODUCT : contains
    PRODUCT ||--o{ ORDER-ITEM : "ordered in"
\`\`\`
endsnippet

snippet mgn1 "mermaid gant" b
\`\`\`mermaid
gantt
    title A Gantt Diagram
    dateFormat  YYYY-MM-DD
    section Section
    A task           :a1, 2014-01-01, 30d
    Another task     :after a1  , 20d
    section Another
    Task in sec      :2014-01-12  , 12d
    another task      : 24d
\`\`\`
endsnippet

snippet mj1 "mermaid journey" b
\`\`\`mermaid
journey
    title My working day
    section Go to work
      Make tea: 5: Me
      Go upstairs: 3: Me
      Do work: 1: Me, Cat
    section Go home
      Go downstairs: 5: Me
      Sit down: 3: Me
\`\`\`
endsnippet

snippet mg1 "mermaid git" b
\`\`\`mermaid
gitGraph
    commit
    commit
    branch develop
    checkout develop
    commit
    commit
    checkout main
    merge develop
    commit
    commit
\`\`\`
endsnippet

snippet mp1 "mermaid pie" b
\`\`\`mermaid
pie title Pets adopted by volunteers
    "Dogs" : 386
    "Cats" : 85
    "Rats" : 15
\`\`\`
endsnippet

snippet mm1 "mermaid mindmap" b
\`\`\`mermaid
mindmap
  root((mindmap))
    Origins
      Long history
      ::icon(fa fa-book)
      Popularisation
        British popular psychology author Tony Buzan
    Research
      On effectivness<br/>and features
      On Automatic creation
        Uses
            Creative techniques
            Strategic planning
            Argument mapping
    Tools
      Pen and paper
      Mermaid
\`\`\`
endsnippet

snippet mf1 "mermaid flowchart" b
\`\`\`mermaid
flowchart ${1|TB,BT,RL,LR,TD|}
	a1[rect]-- ${2:text01} -->a2[rect]
    a1-- ${3:text02} -->b1[(cylinder)]
    a1-- ${4:text03} -->b2(rounded rect)
    a1-- ${5:text04} -->c1{diamond}
\`\`\`
endsnippet

snippet mf2 "mermaid flowchart" b
\`\`\`mermaid
flowchart ${1|TB,BT,RL,LR,TD|}
	a1[rect]-- ${2:text01} -->a2[rect]
    a1-- ${3:text02} -->b1[(cylinder)]
    a1-- ${4:text03} -->b2(rounded rect)
    a1-- ${5:text04} -->c1{diamond}

    b1-- ${5:text04} -->c2((circle))
    b2-- ${5:text04} -->c2
    c1-- ${5:text04} -->c2
\`\`\`
endsnippet





snippet msd "mermaid sequence diagram" b
\`\`\`mermaid
sequenceDiagram
    participant a1 as ${1:Stage A}
    participant b1 as ${2:Stage B}
    participant c1 as ${3:Stage C}
    a1->>b1: ${4:event01}
    loop status check
        c1->>c1: ${5:event02}
    end
    Note right of c1: ${6:loop event details}
    c1-->>a1: ${7:event03}
    c1-->>b1: ${8:event04}
    b1-->>c1: ${9:event05}
\`\`\`
endsnippet


snippet mg1 "mermaid gantt" b
\`\`\`mermaid
gantt
    title ${1:A Gantt Diagram}
    dateFormat  ${2|YYYY-MM-DD,DD-MM-YYYY,MM-DD-YYYY|}
    section ${3:Section}
    First Task       :${4:a1, 2018-07-01, 30d}
    Second Task     :${5:after a1, 20d}
    section ${6:Another}
    Third Task      :${7:2018-07-12, 12d}
    Fourth Task       :${8:24d}
\`\`\`
endsnippet


snippet mg2 "mermaid gantt" b
\`\`\`mermaid
gantt
    title ${1:A Gantt Diagram}
    dateFormat  ${2|YYYY-MM-DD,DD-MM-YYYY,MM-DD-YYYY|}

   section A section
   Completed task            :done,    des1, 2018-01-06,2018-01-08
   Active task               :active,  des2, 2018-01-09, 3d
   Future task               :         des3, after des2, 5d
   Future task2              :         des4, after des3, 5d

   section Critical tasks
   Completed task in the critical line :crit, done, 2018-01-06,24h
   Implement parser and jison          :crit, done, after des1, 2d
   Create tests for parser             :crit, active, 3d
   Future task in critical line        :crit, 5d
   Create tests for renderer           :2d
   Add to mermaid                      :1d

   section Documentation
   Describe gantt syntax               :active, a1, after des1, 3d
   Add gantt diagram to demo page      :after a1  , 20h
   Add another diagram to demo page    :doc1, after a1  , 48h

   section Last section
   Describe gantt syntax               :after doc1, 3d
   Add gantt diagram to demo page      :20h
   Add another diagram to demo page    :48h

\`\`\`
endsnippet


#######################################################################
#                               Symbols                               #
#######################################################################

snippet \G "Gamma" i
\Gamma
endsnippet

snippet \D "Delta" i
\Delta
endsnippet

snippet \L "Lambda" i
\Lambda
endsnippet

snippet \F "Phi" i
\Phi
endsnippet

snippet \P "Pi" i
\Pi
endsnippet

snippet \C "Psi" i
\Psi
endsnippet

snippet \S "Sigma" i
\Sigma
endsnippet

snippet \U "Theta" i
\Theta
endsnippet

snippet \Y "Upsilon" i
\Upsilon
endsnippet

snippet \J "Xi" i
\Xi
endsnippet

snippet \V "Omega" i
\Omega
endsnippet

snippet \a "alpha" i
\alpha
endsnippet

snippet \b "beta" i
\beta
endsnippet

snippet \g "gamma" i
\gamma
endsnippet

snippet \d "delta" i
\delta
endsnippet

snippet \e "epsilon" i
\epsilon
endsnippet

snippet \z "zeta" i
\zeta
endsnippet

snippet \h "eta" i
\eta
endsnippet

snippet \u "theta" i
\theta
endsnippet

snippet \i "iota" i
\iota
endsnippet

snippet \k "kappa" i
\kappa
endsnippet

snippet \l "lambda" i
\lambda
endsnippet

snippet \m "mu" i
\mu
endsnippet

snippet \n "nu" i
\nu
endsnippet

snippet \j "xi" i
\xi
endsnippet

snippet \p "pi" i
\pi
endsnippet

snippet \r "rho" i
\rho
endsnippet

snippet \s "sigma" i
\sigma
endsnippet

snippet \t "tau" i
\tau
endsnippet

snippet \y "upsilon" i
\upsilon
endsnippet

snippet \f "phi" i
\phi
endsnippet

snippet \x "chi" i
\chi
endsnippet

snippet \c "psi" i
\psi
endsnippet

snippet \v "omega" i
\omega
endsnippet

snippet \dg "digamma" i
\digamma
endsnippet

snippet \ve "varepsilon" i
\varepsilon
endsnippet

snippet \vf "varphi" i
\varphi
endsnippet

snippet \vp "varpi" i
\varpi
endsnippet

snippet \vr "varrho" i
\varrho
endsnippet

snippet \vs "varsigma" i
\varsigma
endsnippet

snippet \vu "vartheta" i
\vartheta
endsnippet


#######################################################################
#                            Surround Wrap                            #
#######################################################################


snippet $ "left$ right$"
$${1:${VISUAL}}$$0
endsnippet

snippet $$ "left$$ right$$" i
$$ ${1:${VISUAL}} $$$0
endsnippet

snippet () "left( right)" i
(${1:${VISUAL}})$0
endsnippet

snippet [] "left[ right]" i
[${1:${VISUAL}}]$0
endsnippet

snippet {} "left{ right}" i
{${1:${VISUAL}}}$0
endsnippet

snippet || "left| right|" i
|${1:${VISUAL}}|$0
endsnippet

snippet (] "left( right]" i
(${1:${VISUAL}}]$0
endsnippet

snippet [) "left[ right)" i
[${1:${VISUAL}})$0
endsnippet

snippet "_($)?" "_left{ right}" r
_{${1:${VISUAL}}}$0
endsnippet

snippet "\^($)?" "^left{ right}" r
^{${1:${VISUAL}}}$0
endsnippet

#######################################################################
#                               Math YH                               #
#######################################################################

# Easily insert Euler's number e
snippet "([^a-zA-Z])ee" "e^{} supercript" r
`!p snip.rv = match.group(1)`e^{${1:${VISUAL:}}}$0
endsnippet

# inline Latex math
snippet "(^|[^a-zA-Z])mm" "Inline LaTeX math" r
`!p snip.rv = match.group(1)`\$\$ ${1:${VISUAL:}} \$\$$0
endsnippet
# # inline Latex math
# snippet "(^|[^a-zA-Z])mm" "Inline LaTeX math" r
# `!p snip.rv = match.group(1)`\$${1:${VISUAL:}}\$$0
# endsnippet
# snippet mm "Inline maths" w
# \$$1\$$0
# endsnippet


# Prevent fraction expansion in words containing "//"
snippet "(^|[^a-zA-Z])//" "\frac{}{}" r
`!p snip.rv = match.group(1)`\frac{${1:${VISUAL:}}}{$2}$0
endsnippet
# snippet // "fractions" i
# \\frac{$1}{$2}$0
# endsnippet



snippet sum "summation" i
\\sum_{i=${1:1}}^${2:N}$0
endsnippet


snippet sqrt "square root" i
\\sqrt{${1:N}}$0
endsnippet

snippet prod "Product" w
\prod_{${1:1}}^{${2:\infty}}
endsnippet


snippet \Lap "Laplacian" i
\triangle
endsnippet


snippet par "partial diff" i
\\partial ${0:N}
endsnippet


snippet int "integral" i
\\int_{${1:a}}^{${2:b}} ${0:c}
endsnippet


snippet log "log" i
\\log ${1:e}^${2:x}$0
endsnippet


snippet sin "sin" i
\\sin ${0:\\theta}
endsnippet


snippet cos "cos" i
\\cos ${0:\\theta}
endsnippet


snippet lim "limit" i
\\lim_{${1:x \to +\infty}}${0}
endsnippet

snippet -> "right arrow" i
\rightarrow
endsnippet

snippet deg "degree" i
^\circ
endsnippet



snippet tbf "Text boldface" w
\textbf{$1}
endsnippet

snippet mbf "Math boldface" w
\mathbf{$1}
endsnippet

snippet tit "Text italics" w
\textit{$1}
endsnippet

snippet txt "Text" w
\text{$1}
endsnippet

snippet ol "Overline" w
\overline{$1}
endsnippet

snippet ul "Underline" w
\underline{$1}
endsnippet


snippet it "Item" i
\item
endsnippet

snippet "mat(rix)?" "Smart Matrix" br
\begin{${1:p/b/v/V/B/small}matrix}
	$2
\end{$1matrix}

endsnippet

snippet tabular "Tabular / Array" b
\begin{${1:t}${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${2:c}}
$0${2/(?<=.)(c|l|r)|./(?1: & )/g}
\end{$1${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}

endsnippet

snippet table "Table" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{${4:t}${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${5:c}}
	$0${5/(?<=.)(c|l|r)|./(?1: & )/g}
	\end{$4${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
\end{table}

endsnippet

snippet fig "Figure" b
\begin{figure}[${2:htpb}]
	\centering
	\includegraphics[width=${3:0.8}\linewidth]{${4:name.ext}}
	\caption{${4/(\w+)\.\w+/\u$1/}$0}
	\label{fig:${4/(\w+)\.\w+/$1/}}
\end{figure}

endsnippet

snippet daten "date note" b
`!v strftime("%Y-%m-%d %a")`
[read](read) 
[learn](learn) 
[practise](practise)
exercise/wrist/shoulders 
hydrate

- [routine](routine-2023)

endsnippet
