# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet gcm "Git Commit Message" b
[refs #${1:00157}] ${2:Title - Fix rounding issue with grid mixin}

${3:Content - The grid mixin was working largely as expected, but would not round
the output if passed an odd number. This led to scenarios where
developers were seeing grid gutters of e.g. 12.5px.

Iâ€™ve simply wrapped the Sass `round()` function around the output, so
people will now get the nearest integer whether rounded up or down.}

endsnippet



# vim-snippets/UltiSnips/gitcommit.snippets
snippet chore "create CHORE: commit message"
CHORE: ${1:add build script}
$0
endsnippet

snippet chorela "create CHORE: large commit message"
CHORE: ${1:add build script}

${2:More detailed explanatory text}
See also: ${3:Trello Card or github issue #}
$0
endsnippet

snippet docs "create DOCS: commit message"
DOCS: ${1:explain hat wobble}
$0
endsnippet

snippet docsla "create DOCS: large commit message"
DOCS: ${1:explain hat wobble}

${2:More detailed explanatory text}
See also: ${3:Trello Card or github issue #}
$0
endsnippet

snippet feat "create FEAT: commit message"
FEAT: ${1:add beta sequence}

$0
endsnippet

snippet featla "create FEAT: large commit message"
FEAT: ${1:add beta sequence}

${2:More detailed explanatory text}
See also: ${3:Trello Card or github issue #}
$0
endsnippet

snippet fix "create FIX: commit message"
FIX: ${1:add beta sequence}

$0
endsnippet

snippet fixla "create FIX: large commit message"
FIX: ${1:add beta sequence}

${2:More detailed explanatory text}
See also: ${3:Trello Card or github issue #}
$0
endsnippet

snippet refactor "create REFACTOR: commit message"
REFACTOR: ${1:share logic between 3d and time}

$0
endsnippet

snippet refactorla "create REFACTOR: large commit message"
REFACTOR: ${1:share logic between 3d and time}

${2:More detailed explanatory text}
See also: ${3:Trello Card or github issue #}
$0
endsnippet

snippet style "create STYLE: commit message"
STYLE: ${1:convert tabs to spaces}

$0
endsnippet

snippet stylela "create STYLE: large commit message"
STYLE: ${1:convert tabs to spaces}

${2:More detailed explanatory text}
See also: ${3:Trello Card or github issue #}
$0
endsnippet

snippet test "create TEST: commit message"
TEST: ${1:ensure Tayne retains clothing}

$0
endsnippet

snippet testla "create TEST: large commit message"
TEST: ${1:ensure Tayne retains clothing}

${2:More detailed explanatory text}
See also: ${3:Trello Card or github issue #}
$0
endsnippet
